#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <map>

using namespace std;


class Solution {
public:



    void display2(map<char,int> checkMap) {

        if (checkMap.size() > 0) {
         

            for (auto it = checkMap.begin(); it != checkMap.end(); it++) {
                cout << it->first << " : " << it->second << endl;
            }
        }
        


        return;

    }
    bool isValidSudoku(vector<vector<char>>& board) {

        int maxWL = board.size();
        map<char, int> checkMap;
        int i = 0, 
        int j = 0;


        // VERIFY ROW
        while (i < maxWL) {

            if (board[i][j] != '.') { checkMap[board[i][j]]++; 
                if (checkMap.at(board[i][j]) > 1) {return false;}
            }

            j++;

            if (j == maxWL) {
                i++;
                j = 0;
                checkMap.clear();
            }
        }
       
        checkMap.clear();
        
    // VERIFY COLUMN*******//
        i = 0;
        j = 0;

        while (i < maxWL && j < maxWL) {

            if (board[i][j] != '.') {checkMap[board[i][j]]++;
                if (checkMap.at(board[i][j]) > 1) {return false;}
            }

            i++;

            if (i == maxWL) {
                j++;
                i = 0;
                checkMap.clear();
            }
        }

        checkMap.clear();

    //VERIFY 3X3 SQUARE*******//
        i = 0;
        j = 0;
        int columnCount = 0;
        int rowCount = 0;


        if (board[i][j] != '.') {checkMap[board[i][j]]++;}

        while (i != 8 || j != 8) {

            if ((j) != (((columnCount + 1) * 3) - 1)) {

                j++;
            }
            else {
                i++;
                j = columnCount * 3;
            }

            if (board[i][j] != '.') {checkMap[board[i][j]]++;

                if (checkMap.at(board[i][j]) > 1) {return false;}
            }

            if (((i + 1) == ((rowCount + 1) * 3)) && ((j) == ((columnCount + 1) * 3) - 1)) {

                checkMap.clear();
                rowCount++;

                if (i == 8 && j != 8) {
                    rowCount = 0;
                    i = 0;
                    columnCount++;
                }
            }
        }
        return true;
    }
};




int main() {

    cout << "FIRST BOARD" << endl;

    Solution solution;


    vector<vector<char>> board =
    { {'5', '3', '.', '.', '7', '.', '.', '.', '.'}
    , {'6', '.', '.', '1', '9', '5', '.', '.', '.'}
    , {'.', '9', '8', '.', '.', '.', '.', '6', '.'}
    , {'8', '.', '.', '.', '6', '.', '.', '.', '3'}
    , {'4', '.', '.', '8', '.', '3', '.', '.', '1'}
    , {'7', '.', '.', '.', '2', '.', '.', '.', '6'}
    , {'.', '6', '.', '.', '.', '.', '2', '8', '.'}
    , {'.', '.', '.', '4', '1', '9', '.', '.', '5'}
    , {'.', '.', '.', '.', '8', '.', '.', '7', '9'} };

    solution.isValidSudoku(board);



    cout << "1 B ANSWER IS TRUE" << endl << endl;


    cout << "SECOND BOARD***********************************************************\n\n" << endl;


    board =
    { {'8', '3', '.', '.', '7', '.', '.', '.', '.'}
    , {'6', '.', '.', '1', '9', '5', '.', '.', '.'}
    , {'.', '9', '8', '.', '.', '.', '.', '6', '.'}
    , {'8', '.', '.', '.', '6', '.', '.', '.', '3'}
    , {'4', '.', '.', '8', '.', '3', '.', '.', '1'}
    , {'7', '.', '.', '.', '2', '.', '.', '.', '6'}
    , {'.', '6', '.', '.', '.', '.', '2', '8', '.'}
    , {'.', '.', '.', '4', '1', '9', '.', '.', '5'}
    , {'.', '.', '.', '.', '8', '.', '.', '7', '9'} };


    solution.isValidSudoku(board);

    cout << "2 B ANSWER IS FALSE" << endl << endl;

    cout << "THIRD BOARD***********************************************************\n\n" << endl;
    




    board = { {'.', '.', '.', '.', '5', '.', '.', '1', '.'}
            , {'.', '4', '.', '3', '.', '.', '.', '.', '.'}
            , {'.', '.', '.', '.', '.', '4', '.', '.', '1'}
            , {'8', '.', '.', '.', '.', '.', '.', '2', '.'}
            , {'.', '.', '2', '.', '7', '.', '.', '.', '.'}
            , {'.', '1', '5', '.', '.', '.', '.', '.', '.'}
            , {'.', '.', '.', '.', '.', '2', '.', '.', '.'}
            , {'.', '2', '.', '9', '.', '.', '.', '.', '.'}
            , {'.', '.', '4', '.', '.', '.', '.', '.', '.'} };



    solution.isValidSudoku(board);
    cout << "3 B ANSWER IS FALSE" << endl << endl;

    cout << "FOURTH BOARD***********************************************************\n\n" << endl;


    board = { {'.', '.', '.', '.', '.', '.', '.', '.', '.'}
            , {'.', '.', '.', '.', '.', '.', '.', '.', '.'}
            , {'.', '.', '.', '.', '.', '.', '.', '.', '.'}
            , {'.', '.', '.', '.', '.', '.', '.', '.', '.'}
            , {'.', '.', '.', '.', '.', '.', '.', '.', '.'}
            , {'.', '.', '.', '.', '.', '.', '.', '.', '.'}
            , {'.', '.', '.', '.', '.', '.', '.', '.', '.'}
            , {'.', '.', '.', '.', '.', '.', '.', '.', '.'}
            , {'.', '.', '.', '.', '.', '.', '.', '.', '.'} };

    solution.isValidSudoku(board);
    cout << "4 B ANSWER IS TRUE" << endl << endl;

    cout << "FIFTH BOARD***********************************************************\n\n" << endl;




    board =
    { {'.', '2', '.', '.', '.', '.', '.', '.', '.'}
    , {'.', '.', '.', '.', '.', '.', '5', '.', '1'}
    , {'.', '.', '.', '.', '.', '.', '8', '1', '3'}
    , {'4', '.', '9', '.', '.', '.', '.', '.', '.'}
    , {'.', '.', '.', '.', '.', '.', '.', '.', '.'}
    , {'.', '.', '2', '.', '.', '.', '.', '.', '.'}
    , {'7', '.', '6', '.', '.', '.', '.', '.', '.'}
    , {'9', '.', '.', '.', '.', '4', '.', '.', '.'}
    , {'.', '.', '.', '.', '.', '.', '.', '.', '.'} };


    solution.isValidSudoku(board);
    cout << "5 B ANSWER IS FALSE" << endl << endl;

    cout << "SIXTH BOARD***********************************************************\n\n" << endl;




    board = { {'.', '.', '.', '.', '.', '.', '5', '.', '.'}
            , {'.', '.', '.', '.', '.', '.', '.', '.', '.'}
            , {'.', '.', '.', '.', '.', '.', '.', '.', '3'}
            , {'.', '2', '.', '7', '.', '.', '.', '.', '.'}
            , {'8', '3', '6', '5', '.', '.', '.', '.', '1'}
            , {'.', '.', '.', '.', '.', '1', '.', '.', '.'}
            , {'2', '.', '.', '.', '.', '.', '.', '.', '5'}
            , {'.', '.', '.', '.', '.', '.', '.', '.', '7'}
            , {'.', '.', '.', '4', '.', '.', '.', '7', '.'} };

    solution.isValidSudoku(board);
    cout << "6 B ANSWER IS FALSE" << endl << endl;

    return 0;
}